#if defined(SL_COMPONENT_CATALOG_PRESENT)
#include "sl_component_catalog.h"
#endif
#include "sl_assert.h"
#include "em_device.h"
#include "sl_iostream.h"
#include "sl_iostream_uart_si91x.h"
#include "sl_iostream_usart_si91x.h"
#include "sl_iostream_init_si91x_usart.h"

// Include instance config {# Include instance config #}
{% for instance in iostream_usart_instances %} #include "sl_iostream_usart_{{ instance }}_config.h"
{% endfor %}

{% for instance in iostream_usart_instances %}
sl_status_t sl_iostream_usart_init_{{ instance }}(void);
{% endfor %}
// Instance(s) handle and context variable {# Generate iostream handle and context variable(s) #}
{% for instance in iostream_usart_instances %}
static sl_iostream_uart_t sl_iostream_{{ instance }};
sl_iostream_t *sl_iostream_{{ instance }}_handle = &sl_iostream_{{ instance }}.stream;
sl_iostream_uart_t *sl_iostream_uart_{{ instance }}_handle = &sl_iostream_{{ instance }};
static sl_iostream_usart_context_t  context_{{ instance }};
static uint8_t  rx_buffer_{{ instance }}[SL_IOSTREAM_USART_{{ instance | upper }}_RX_BUFFER_SIZE];
sl_iostream_instance_info_t sl_iostream_instance_{{ instance }}_info = {
  .handle = &sl_iostream_{{ instance }}.stream,
  .name = "{{ instance }}",
  .type = SL_IOSTREAM_TYPE_91X_UART,  
  .init = sl_iostream_usart_init_{{ instance }},
};
{% endfor %}

{% for instance in iostream_usart_instances %}
sl_status_t sl_iostream_usart_init_{{ instance }}(void)
{
  sl_status_t status;
  USART_InitAsync_TypeDef init_{{ instance }} = usart_config;
  init_{{ instance }}.baudrate = SL_IOSTREAM_USART_{{ instance | upper }}_BAUDRATE;
  init_{{ instance }}.parity = SL_IOSTREAM_USART_{{ instance | upper }}_PARITY;
  init_{{ instance }}.stopbits = SL_IOSTREAM_USART_{{ instance | upper }}_STOP_BITS;
  init_{{ instance }}.mode = SL_IOSTREAM_USART_{{ instance | upper }}_MODE;
  init_{{ instance }}.hwflowcontrol = SL_IOSTREAM_USART_{{ instance | upper }}_FLOW_CONTROL_TYPE;
  init_{{ instance }}.databits = SL_IOSTREAM_USART_{{ instance | upper }}_DATA_BITS;

  sl_iostream_uart_config_t uart_config_{{ instance }} = {
    .rx_buffer = rx_buffer_{{ instance }},
    .rx_buffer_length = SL_IOSTREAM_USART_{{ instance | upper}}_RX_BUFFER_SIZE,
    .lf_to_crlf = SL_IOSTREAM_USART_{{ instance | upper }}_CONVERT_BY_DEFAULT_LF_TO_CRLF, 
  };
  // Instantiate usart instance {# Initialize usart instance #}
  status = sl_iostream_usart_init(&sl_iostream_{{ instance }},
                                  &uart_config_{{ instance }},
                                  &init_{{ instance }},
                                  NULL,
                                  &context_{{ instance }});
  EFM_ASSERT(status == SL_STATUS_OK);

  return status;
}
{% endfor %}

{# Init function #}
void sl_iostream_usart_init_instances(void)
{
  sl_status_t status;

  // Instantiate usart instance(s) {# Initialize usart instance(s) #}
  {% for instance in iostream_usart_instances %}
  status = sl_iostream_usart_init_{{ instance }}();
  EFM_ASSERT(status == SL_STATUS_OK);
  {% endfor %}
}