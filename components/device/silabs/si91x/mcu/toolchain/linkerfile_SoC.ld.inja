/***************************************************************************//**
 * GCC Linker script for Silicon Labs devices
 *******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/
{%- set device = aggregate("silicon_labs.device") -%}
{#-
  Device specific sizes and addresses. These variables describes the physical
  memory of the device.
-#}
{%- set sram_addr = first(device.ram_addr) -%}
{%- set sram_size = first(device.ram_size) -%}
{%- set flash_addr = first(device.flash_addr) -%}
{%- set flash_size = first(device.flash_size) -%}
{%- set flash_page_size = first(device.flash_page_size) -%}

{%- if device.psram_present -%}
	{%- set psram_addr = first(device.psram_addr) -%}
	{%- set psram_size = first(device.psram_size) -%}
{%- endif -%}

{%- if device.udma_enable -%}
  {%- set udma0_main_size = device.udma0_size -%}
  {%- set udma0_start_addr = device.udma0 -%}
  {%- set udma1_main_size = device.udma1_size -%}
  {%- set udma1_start_addr = device.udma1 -%}
{%- endif -%}

{#- Application specific sizes. Here we start to calculate the application view of the physical memory. -#}
{%- set app_flash_start = flash_addr -%}
{%- set app_flash_end = flash_addr + flash_size -%}
{%- set app_ram_start = sram_addr -%}
{%- set app_ram_end = sram_addr + sram_size -%}

{%- if device.psram_present -%}	
	{%- set app_psram_start = device.psram_addr -%}
	{%- if device.text_segment_in_psram -%}
		{#- Adds 0x1000 offset (4096 in decimal) -#}
		{%- set psram_start_offset = 4096 -%}
		{%- set app_psram_start = device.psram_addr + psram_start_offset -%}
	{%- endif -%}	
	{%- set app_psram_end = device.psram_addr + device.psram_size -%}
{%- endif -%}

{#- Calculate application flash and ram size based on start and end address. -#}
{%- set app_flash_size = app_flash_end - app_flash_start -%}
{%- set app_ram_size = app_ram_end - app_ram_start -%}

{%- if device.udma_enable -%}
  {%- set udma_buffer = device.udma_buffer -%}
  {%- set app_ram_size = app_ram_size - udma_buffer -%}
  {%- set udma0_start_addr = app_ram_size -%}
  {%- set udma1_start_addr = udma1_start_addr -  udma_buffer%}
{%- endif -%}

{%- if device.psram_present -%}	
	{%- set app_psram_size = app_psram_end - app_psram_start -%}
{%- endif -%}

{%- set rtt = 0 -%}
{% if device.linker_rtt_section -%}
{%-   set rtt = 1 -%}
{% endif -%}

{%- if device.nvm3_size -%}
	{%- set nvm_size = first(device.nvm3_size) -%}
	{%- set app_flash_size = app_flash_size - nvm_size -%}
{%- endif -%}

MEMORY
{
   rom   (rx)  : ORIGIN = 0x{{ hex(app_flash_start) }}, LENGTH = 0x{{ hex(app_flash_size) }}
   ram   (rwx) : ORIGIN = 0x{{ hex(app_ram_start) }}, LENGTH = 0x{{ hex(app_ram_size) }}
   {% if device.psram_present -%}
   psram (rwx) : ORIGIN = 0x{{ hex(app_psram_start) }}, LENGTH = 0x{{ hex(app_psram_size) }}
   {%- endif %}
}

{%- if device.udma_enable %}
MEMORY
{
	udma0   (rwx)  : ORIGIN = 0x{{ hex(udma0_start_addr) }}, LENGTH = 0x{{ hex(udma0_main_size) }}
	udma1   (rwx)  : ORIGIN = 0x{{ hex(udma1_start_addr) }}, LENGTH = 0x{{ hex(udma1_main_size) }}
}
{%- endif %}

{%- if device.psram_present and device.psram_linker_config_enabled -%}
	_last_psram_location = ORIGIN(psram);
	_last_ram_location = ORIGIN(ram);
{%- endif -%}

ENTRY(Reset_Handler)
 
SECTIONS
{
	.text :
	{
		KEEP(*(.isr_vector))
		{%- if device.ram_execution %}
     	    KEEP(*(.reset_handler))
			*(EXCLUDE_FILE(*sl_si91x_bus.c.o *sl_si91x_driver.c.o *sli_si91x_multithreaded.c.o *rsi_deepsleep_soc.c.o *rsi_hal_mcu_m4_ram.c.o *croutine.c.o *event_groups.c.o *list.c.o *queue.c.o *stream_buffer.c.o *tasks.c.o *timers.c.o *cmsis_os2.c.o *freertos_umm_malloc_host.c.o *malloc_buffers.c.o *sl_rsi_utility.c.o *port.c.o *heap_*.c.o) .text*)
		{% endif %}
        {% if device.psram_present and device.psram_linker_config_enabled and device.psram_powersave_handle %}	
			*(EXCLUDE_FILE(*rsi_deepsleep_soc.c.o *sl_si91x_psram.c.o *rsi_qspi.c.o *rsi_pll.c.o *rsi_egpio.c.o *sl_rsi_utility.c.o) .text*)
		{% else if device.power_manager_ps2 %}
			*(EXCLUDE_FILE(*cmsis_os2.c.o *port.c.o *queue.c.o *sl_rsi_utility.c.o *tasks.c.o *clock_update.c.o *rsi_deepsleep_soc.c.o *rsi_egpio.c.o *rsi_ipmu.c.o *ipmu_apis.c.o *rsi_pll.c.o *rsi_power_save.c.o *rsi_system_config.c.o *rsi_time_period.c.o *rsi_ulpss_clk.c.o *system_si91x.c.o *sl_si91x_power_manager.c.o *sli_si91x_power_manager.c.o *power_manager_m4_wireless_example.c.o *sl_si91x_button.c.o *sl_si91x_button_instances.c.o *app.c.o *main.c.o {% for c in debug_ps2 %}*{{c}} {% endfor %}{% for c in calendar_ps2 %}*{{c}} {% endfor %}{% for c in ulp_timer_ps2 %}*{{c}} {% endfor %}{% for c in wdt_ps2 %}*{{c}} {% endfor %}{% for c in adc_ps2 %}*{{c}} {% endfor %}{% for c in bod_ps2 %}*{{c}} {% endfor %}{% for c in comparator_ps2 %}*{{c}} {% endfor %}{% for c in cts_ps2 %}*{{c}} {% endfor %}{% for c in dac_ps2 %}*{{c}} {% endfor %}{% for c in dma_ps2 %}*{{c}} {% endfor %}{% for c in gpio_ps2 %}*{{c}} {% endfor %}{% for c in i2c_ps2 %}*{{c}} {% endfor %}{% for c in i2s_ps2 %}*{{c}} {% endfor %}{% for c in ir_ps2 %}*{{c}} {% endfor %}{% for c in ssi_ps2 %}*{{c}} {% endfor %}{% for c in sysrtc_ps2 %}*{{c}} {% endfor %}{% for c in uart_ps2 %}*{{c}} {% endfor %}{% for c in user_files_ps2 %}*{{c}}{% endfor %}) .text*)
		{% else if device.ulp_mode_execution %}	
			*(.copysection*) 
	    	*(.zerosection*)
		{% else if not device.ram_execution %}
			*(.text*)        
			KEEP(*(.init))
			KEEP(*(.fini))
		{% endif %}

		/* .ctors */
		*crtbegin.c.o(.ctors)
		*crtbegin?.c.o(.ctors)
		*(EXCLUDE_FILE(*crtend?.c.o *crtend.c.o) .ctors)
		*(SORT(.ctors.*))
		*(.ctors)
		
		/* .dtors */
		*crtbegin.c.o(.dtors)
		*crtbegin?.c.o(.dtors)
		*(EXCLUDE_FILE(*crtend?.c.o *crtend.c.o) .dtors)
		*(SORT(.dtors.*))
		*(.dtors)
		
		{%- if not device.ram_execution -%}
		{%- if not device.ulp_mode_execution -%}
		{%- if not device.power_manager_ps2 -%}
			*(.rodata*)
		{%- endif -%}
		{%- endif -%}
		{%- endif %}
		KEEP(*(.eh_fram e*))
	
	{%- if device.psram_present and device.text_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else %}			
	} > rom 
	{%- endif %}	
	
	.ARM.extab : 
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	{%- if device.psram_present and device.text_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else %}			
	} > rom 
	{% endif %}
	
	__exidx_start = .;
	.ARM.exidx :
	{
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
	{%- if device.psram_present and device.text_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else %}			
	} > rom 
	{% endif %} 
	__exidx_end = .;
	__etext = .;
	
	{%- if device.ulp_mode_execution %}
	.copysection :
	{
	. = ALIGN(4);
	__copysection_start__ = .;
	*(.copysection*)
	__copysection_end__ = .;
	} > rom
	
	.zerosection :
	{
	. = ALIGN(4);
	__zerosection_start__ = .;
	*(.zerosection*)
	__zerosection_end__ = .;
	} > rom
	{%- endif %}


	{% if device.psram_present and device.psram_linker_config_enabled and device.psram_powersave_handle %}
		_slpcode = __etext;

		. = _last_ram_location;

		/* Power save & PSRAM driver code */
		.sleep_psram_driver :
		{
			__sleep_code_start__ = .;
			/* _scode is used in code startup code */
			_scode = __sleep_code_start__;
			. = ALIGN(4);
	    	*rsi_deepsleep_soc.c.o(.text*)
	    	*sl_si91x_psram.c.o(.text*)
	    	*sl_si91x_psram_handle.c.o(.text*)
	    	*rsi_qspi.c.o(.text*)
	    	*rsi_pll.c.o(.text*)
	    	*rsi_egpio.c.o(.text*)
	    	*rsi_deepsleep_soc.c.o(.data*)
	    	*sl_si91x_psram.c.o(.data*)
	    	*sl_si91x_psram_handle.c.o(.data*)
	    	*rsi_qspi.c.o(.data*)
	    	*rsi_pll.c.o(.data*)
	    	*rsi_egpio.c.o(.data*)
	    	__sleep_code_end__ = .;
			/* _ecode is used in code startup code */
			_ecode = __sleep_code_end__;	
	    	_last_ram_location = .;
	  	{%- if device.text_segment_in_psram %}
		} > ram AT> psram
	  	/* _sidata is used in code startup code */
		_sidata = __etext + (__sleep_code_end__ - __sleep_code_start__);
		_last_psram_location = _sidata;
	  	{%- else %}
	  	} > ram AT> rom

	  	/* _sidata is used in code startup code */
		_sidata = __etext + (__sleep_code_end__ - __sleep_code_start__);
		{% endif -%}
	{%- else -%}
		/* _sidata is used in code startup code */
		_sidata = __etext;
	{%- endif %}
	
	{%- if device.psram_present and device.psram_linker_config_enabled %}
		{%- if data_segment_in_psram %}
			. = _last_psram_location;
		{%- else %}
			. = _last_ram_location;
		{%- endif %}
	{%- endif %}
	
	{%- if device.psram_present and device.psram_linker_config_enabled %} 	
	.data . :
	{%- else %}
	.data :
	{%- endif %}
	{
		__data_start__ = .;
		
		/* _sdata is used in startup code */
		_sdata = __data_start__;
		{%- if not device.power_manager_ps2 %}
			{%- if device.ram_execution %}
				KEEP(*(.ramVector))	
				KEEP(*(.init))
				KEEP(*(.fini))
				*(.rodata*)
				*(.data*)
			{%- endif -%}
			{%- if device.ulp_mode_execution %}
				*(.text*)        
				*(.rodata*)
				KEEP(*(.init))
				KEEP(*(.fini))
			{%- endif %}
			{%- if device.ram_execution -%}
				{%- if not device.ulp_mode_execution %}
					*rsi_hal_mcu_m4_ram.c.o(.text*)
					*sl_si91x_driver.c.o(.text*)
					*sl_si91x_bus.c.o(.text*)
					*sli_si91x_multithreaded.c.o(.text*)
						{%- if not device.psram_linker_config_enabled %}
					*rsi_deepsleep_soc.c.o(.text*)
						{%- endif %}
					*croutine.c.o(.text*)
					*event_groups.c.o(.text*)
					*list.c.o(.text*)
					*queue.c.o(.text*)
					*cmsis_os2.c.o(.text*)
					*stream_buffer.c.o(.text*)
					*tasks.c.o(.text*)
					*timers.c.o(.text*)
					*freertos_umm_malloc_host.c.o(.text*)
					*malloc_buffers.c.o(.text*)
					*sl_rsi_utility.c.o(.text*)
					*port.c.o(.text*)
					*heap_*.c.o(.text*)
				{%- else if device.ulp_mode_execution %}
					*(.text*)   
					*(.rodata*)
					*(.data*)
					KEEP(*(.init))
					KEEP(*(.fini))
				{%- else %}
					*(.data*)
				{%- endif -%}
			{%- else %}
				*(.data*)
			{%- endif -%}
		{%- endif %}
		{%- if device.power_manager_ps2 %}
			KEEP(*(.ramVector))
			*(.data*)
			*(.rodata*)
			KEEP(*(.init))
			KEEP(*(.fini))
			*cmsis_os2.c.o(.text*)
			*port.c.o(.text*)
			*queue.c.o(.text*)
			*sl_rsi_utility.c.o(.text*)
			*tasks.c.o(.text*)
			*clock_update.c.o(.text*)
			*rsi_deepsleep_soc.c.o(.text*)
			*rsi_egpio.c.o(.text*)
			*rsi_ipmu.c.o(.text*)
			*ipmu_apis.c.o(.text*)
			*rsi_pll.c.o(.text*)
			*rsi_power_save.c.o(.text*)
			*rsi_system_config.c.o(.text*)
			*rsi_time_period.c.o(.text*)
			*rsi_ulpss_clk.c.o(.text*)
			*system_si91x.c.o(.text*)
			*sl_si91x_power_manager.c.o(.text*)
			*sl_si91x_button.c.o(.text*)
			*sl_si91x_button_instances.c.o(.text*)
			*sli_si91x_power_manager.c.o(.text*)
			*power_manager_m4_wireless_example.c.o(.text*)
			*app.c.o(.text*)
			*main.c.o(.text*)
			{% for c in device.debug_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.calendar_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.ulp_timer_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.wdt_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.adc_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.bod_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.comparator_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.cts_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.dac_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.dma_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.gpio_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.i2c_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.i2s_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.ir_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.ssi_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.sysrtc_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.uart_ps2 %}*{{c}}(.text*)
			{% endfor %}{% for c in device.user_files_ps2 %}*{{c}}(.text*)
			{% endfor %}
		{% endif %}

		. = ALIGN(4);
		/* preinit data */
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP(*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);
		
		. = ALIGN(4);
		/* init data */
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP(*(SORT(.init_array.*)))
		KEEP(*(.init_array))
		PROVIDE_HIDDEN (__init_array_end = .);
		
		. = ALIGN(4);
		/* finit data */
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP(*(SORT(.fini_array.*)))
		KEEP(*(.fini_array))
		PROVIDE_HIDDEN (__fini_array_end = .);
		
		KEEP(*(.jcr*))
		. = ALIGN(4);
		/* All data end */
		__data_end__ = .;
		
		/* _edata is used in startup code */
		_edata = __data_end__;
	{%- if device.psram_present and device.data_segment_in_psram and not device.text_segment_in_psram %}
		_last_psram_location = .;
	} > psram	AT> rom
	{%- else if device.psram_present and device.data_segment_in_psram and device.text_segment_in_psram %}
		_last_psram_location = .;
	} > psram
	{%- else if device.psram_present and device.text_segment_in_psram %}	
		_last_ram_location = .;	
	} > ram AT> psram
	{%- else if device.psram_present and device.psram_linker_config_enabled %}	
		_last_ram_location = .;	
	} > ram AT> rom
	{%- else %} 
	} > ram AT> rom
	{% endif -%}

	{%- if device.psram_present and device.psram_linker_config_enabled %}
		{%- if device.bss_segment_in_psram %}
			. = _last_psram_location;	
		{%- else %}
			. = _last_ram_location;
		{% endif %} 
	{% endif %}	
	
	.bss (NOLOAD) :
	{
		. = ALIGN(4);
		__bss_start__ = .;
		*(.bss*)
		*(COMMON)
		. = ALIGN(4);
		__bss_end__ = .;
	{%- if device.psram_present and device.bss_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else if device.psram_present and device.psram_linker_config_enabled %}
		_last_ram_location = .;			
	} > ram 
	{%- else %} 
	} > ram 
	{%- endif -%}
		
	{%- if device.psram_present and device.psram_linker_config_enabled %}
		{%- if device.stack_segment_in_psram %}
			. = _last_psram_location;	
		{%- else %}
			. = _last_ram_location;
		{% endif -%}
	{%- endif %}

	/* Modify the below value to change the stack size */
	StackSize = 0x3000;
	.stack ALIGN(8) (NOLOAD):
	{
		__StackLimit = .;
		KEEP(*(.stack*))
		. = ALIGN(4);
		. += StackSize;
		__StackTop = .;
		PROVIDE(__stack = __StackTop);
	{%- if device.psram_present and device.stack_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else if device.psram_present and device.psram_linker_config_enabled %}	
		_last_ram_location = .;
	} > ram		
	{%- else %}			
	} > ram
	{% endif %}

	{%- if device.psram_present and device.psram_linker_config_enabled %}
		{%- if device.heap_segment_in_psram %}
			. = _last_psram_location;	
		{%- else %}
			. = _last_ram_location;
		{%- endif %}
	{%- endif %}

  	.heap (COPY):
  	{
		__HeapBase = .;
		__end__ = .;
		end = __end__;
		_end = __end__;
		KEEP(*(.heap*))
  		{%- if device.psram_present and device.heap_segment_in_psram %}
	  		. = ORIGIN(psram) + LENGTH(psram);	
		{%- else %}
			. = ORIGIN(ram) + LENGTH(ram);
  		{% endif %}
		__HeapLimit = .;
	{%- if device.psram_present and device.heap_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else %}			
	} > ram
	{% endif %}

	__heap_size = __HeapLimit - __HeapBase;
	{%- if device.udma_enable %}
		.udma_addr0 :
		{
			*(.udma_addr0*)
		{%- if device.psram_present and device.text_segment_in_psram %}
		} > udma0 AT> psram 
		{%- else %}
		} > udma0 AT> rom
		{%- endif %}

		.udma_addr1 :
		{
			*(.udma_addr1*)
		{%- if device.psram_present and device.text_segment_in_psram %}
		} > udma1 AT> psram 
		{%- else %}		
		} > udma1 AT> rom 
		{%- endif -%}
	{%- endif %}	

	{%- if device.nvm3_enable %}
		__ram_end__ = 0x{{ hex(app_ram_start) }} + 0x{{ hex(app_ram_size) }};
		__main_flash_end__ = 0x{{ hex(app_flash_start) }} + 0x{{ hex(app_flash_size) }};
	
		/* This is where we handle flash storage blocks. We use dummy sections for finding the configured block sizes and then "place" them at the end of flash when the size is known. */
		.internal_storage (DSECT) : {
			KEEP(*(.internal_storage*))
		} > rom
		
		.nvm (DSECT) : {
			KEEP(*(.simee*))
		} > rom

		linker_nvm_end = __main_flash_end__;
		linker_nvm_begin = linker_nvm_end - SIZEOF(.nvm);
		linker_nvm_size = SIZEOF(.nvm);
		linker_storage_end = linker_nvm_begin;
		__nvm3Base = linker_nvm_begin;	
			
		linker_storage_begin = linker_storage_end - SIZEOF(.internal_storage);
		linker_storage_size = SIZEOF(.internal_storage);
		ASSERT((linker_storage_begin >= (__etext + SIZEOF(.data))), "FLASH memory overflowed !")
	{%- endif %}   
}